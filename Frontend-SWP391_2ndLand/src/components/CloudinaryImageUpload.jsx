import React, { useState } from 'react';
import { Upload, Image, X, AlertCircle } from 'lucide-react';

/**
 * Component upload ·∫£nh l√™n Cloudinary cho d·ª± √°n SWP391
 * 
 * H∆Ø·ªöNG D·∫™N SETUP CLOUDINARY:
 * 1. ƒêƒÉng nh·∫≠p Cloudinary Dashboard v·ªõi t√†i kho·∫£n SWP391
 * 2. T·∫°o Upload Preset:
 *    - V√†o Settings > Upload > Add Upload Preset
 *    - Preset name: 'swp391_upload' 
 *    - Signing Mode: 'Unsigned' (quan tr·ªçng!)
 *    - Asset folder: 'swp391/listings' (khuy·∫øn ngh·ªã cho t·ªï ch·ª©c file)
 *    - Save preset
 * 
 * H∆Ø·ªöNG D·∫™N TEST V·ªöI CLOUDINARY KH√ÅC:
 * - Thay ƒë·ªïi CLOUDINARY_CLOUD_NAME v√† CLOUDINARY_UPLOAD_PRESET ·ªü d√≤ng 24-25
 * - T·∫°o upload preset t∆∞∆°ng t·ª± trong t√†i kho·∫£n Cloudinary c·ªßa b·∫°n
 * 
 * @param {Object} props - Props c·ªßa component
 * @param {Function} props.onImageUpload - Callback khi upload th√†nh c√¥ng
 * @param {string} props.currentImage - URL ·∫£nh hi·ªán t·∫°i
 * @param {string} props.className - CSS class t√πy ch·ªçn
 * @param {boolean} props.disabled - Tr·∫°ng th√°i disable
 */
const CloudinaryImageUpload = ({ 
  onImageUpload, 
  currentImage = '', 
  className = '',
  disabled = false
}) => {
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState(null);
  const [previewImage, setPreviewImage] = useState(currentImage);

  // C·∫•u h√¨nh Cloudinary - SWP391 Project  
  // QUAN TR·ªåNG: ƒê·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, ch√∫ng ta include c·∫£ API key
  const CLOUDINARY_CLOUD_NAME = 'SWP391'; // Cloud name c·ªßa d·ª± √°n SWP391
  const CLOUDINARY_UPLOAD_PRESET = 'swp391_upload'; // Upload preset ph·∫£i l√† Unsigned mode
  const CLOUDINARY_API_KEY = '246726946671738'; // API key c·ªßa SWP391 (ƒë·ªÉ ƒë·∫£m b·∫£o authentication)

  /**
   * X·ª≠ l√Ω upload ·∫£nh l√™n Cloudinary
   * @param {File} file - File ·∫£nh ƒë∆∞·ª£c ch·ªçn
   */
  const handleImageUpload = async (file) => {
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      setError('Vui l√≤ng ch·ªçn file ·∫£nh h·ª£p l·ªá');
      return;
    }

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB');
      return;
    }

    try {
      setUploading(true);
      setError(null);

      // T·∫°o FormData v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt
      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);
      formData.append('api_key', CLOUDINARY_API_KEY); // Th√™m API key ƒë·ªÉ ƒë·∫£m b·∫£o authentication
      formData.append('folder', 'swp391/listings'); // Folder ƒë·ªÉ t·ªï ch·ª©c file
      
      // Debug information chi ti·∫øt
      console.log('üîÑ B·∫Øt ƒë·∫ßu upload ·∫£nh v·ªõi c·∫•u h√¨nh:', {
        cloud_name: CLOUDINARY_CLOUD_NAME,
        upload_preset: CLOUDINARY_UPLOAD_PRESET,
        api_key: CLOUDINARY_API_KEY ? `${CLOUDINARY_API_KEY.substring(0, 8)}...` : 'kh√¥ng c√≥',
        file_name: file.name,
        file_size: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
        file_type: file.type,
        endpoint: `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`
      });

      // G·ªçi API Cloudinary v·ªõi endpoint ch√≠nh x√°c
      const uploadUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData,
        // Kh√¥ng set Content-Type header, ƒë·ªÉ browser t·ª± handle v·ªõi FormData
      });

      const data = await response.json();

      if (response.ok && data.secure_url) {
        // Upload th√†nh c√¥ng
        const imageUrl = data.secure_url;
        console.log('‚úÖ Upload ·∫£nh th√†nh c√¥ng:', {
          url: imageUrl,
          public_id: data.public_id,
          folder: data.folder,
          format: data.format,
          resource_type: data.resource_type,
          created_at: data.created_at,
          bytes: data.bytes,
          width: data.width,
          height: data.height
        });
        
        setPreviewImage(imageUrl);
        onImageUpload(imageUrl);
      } else {
        // Debug chi ti·∫øt l·ªói Cloudinary
        console.error('‚ùå Cloudinary Upload Error - Response Details:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          headers: Object.fromEntries(response.headers.entries()),
          error_data: data.error,
          full_response: data
        });
        
        // Ph√¢n t√≠ch lo·∫°i l·ªói c·ª• th·ªÉ
        let errorMessage = 'Upload ·∫£nh th·∫•t b·∫°i';
        let errorDetails = '';
        
        if (data.error) {
          errorMessage = data.error.message || data.error;
          errorDetails = `Error code: ${data.error.http_code || response.status}`;
          
          // C√°c l·ªói th∆∞·ªùng g·∫∑p v√† gi·∫£i th√≠ch
          if (errorMessage.includes('API key')) {
            errorDetails += ' - L·ªói API key kh√¥ng h·ª£p l·ªá';
          } else if (errorMessage.includes('preset')) {
            errorDetails += ' - Upload preset kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a c·∫•u h√¨nh ƒë√∫ng';
          } else if (errorMessage.includes('signature')) {
            errorDetails += ' - L·ªói x√°c th·ª±c ch·ªØ k√Ω';
          } else if (errorMessage.includes('resource')) {
            errorDetails += ' - L·ªói t√†i nguy√™n ho·∫∑c gi·ªõi h·∫°n upload';
          }
        }
        
        console.error('üìã Error Analysis:', {
          message: errorMessage,
          details: errorDetails,
          suggestion: 'Ki·ªÉm tra Cloudinary dashboard v√† c·∫•u h√¨nh preset'
        });
        
        throw new Error(`${errorMessage}${errorDetails ? ` (${errorDetails})` : ''}`);
      }
    } catch (err) {
      // Enhanced error logging v·ªõi th√¥ng tin chi ti·∫øt
      console.error('üö´ Exception trong qu√° tr√¨nh upload:', {
        error_name: err.name,
        error_message: err.message,
        error_stack: err.stack,
        cloudinary_config: {
          cloud_name: CLOUDINARY_CLOUD_NAME,
          upload_preset: CLOUDINARY_UPLOAD_PRESET,
          api_key_exists: !!CLOUDINARY_API_KEY
        },
        file_info: {
          name: file.name,
          size: file.size,
          type: file.type
        },
        timestamp: new Date().toISOString()
      });
      
      // Set user-friendly error message d·ª±a tr√™n lo·∫°i l·ªói
      let userErrorMessage = 'C√≥ l·ªói x·∫£y ra khi upload ·∫£nh';
      
      if (err.message.includes('API key')) {
        userErrorMessage = '‚ùå L·ªói c·∫•u h√¨nh Cloudinary: API key kh√¥ng h·ª£p l·ªá';
      } else if (err.message.includes('preset')) {
        userErrorMessage = '‚ùå L·ªói upload preset: Preset ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng';
      } else if (err.message.includes('network') || err.message.includes('fetch')) {
        userErrorMessage = 'üåê L·ªói k·∫øt n·ªëi m·∫°ng: Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i';
      } else if (err.message.includes('signature')) {
        userErrorMessage = 'üîê L·ªói x√°c th·ª±c: Signature kh√¥ng h·ª£p l·ªá';
      } else if (err.message.includes('size') || err.message.includes('large')) {
        userErrorMessage = 'üì¶ File qu√° l·ªõn: Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n 10MB';
      } else if (err.message.includes('format') || err.message.includes('type')) {
        userErrorMessage = 'üñºÔ∏è ƒê·ªãnh d·∫°ng file kh√¥ng h·ªó tr·ª£: Ch·ªâ ch·∫•p nh·∫≠n JPG, PNG, GIF';
      }
      
      console.error('üë§ User Error Message:', userErrorMessage);
      setError(userErrorMessage);
    } finally {
      setUploading(false);
    }
  };

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn file
   */
  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      handleImageUpload(file);
    }
  };

  /**
   * X·ª≠ l√Ω x√≥a ·∫£nh
   */
  const handleRemoveImage = () => {
    setPreviewImage('');
    onImageUpload('');
    setError(null);
  };

  /**
   * X·ª≠ l√Ω drag & drop
   */
  const handleDrop = (e) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file) {
      handleImageUpload(file);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  return (
    <div className={`cloudinary-upload-container ${className}`}>
      {/* Hi·ªÉn th·ªã ·∫£nh preview n·∫øu c√≥ */}
      {previewImage ? (
        <div className="image-preview-container">
          <div className="relative">
            <img 
              src={previewImage} 
              alt="Preview" 
              className="preview-image"
            />
            {!disabled && (
              <button
                type="button"
                onClick={handleRemoveImage}
                className="remove-image-btn"
                title="X√≥a ·∫£nh"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      ) : (
        /* Upload area */
        <div 
          className={`upload-area ${uploading ? 'uploading' : ''} ${disabled ? 'disabled' : ''}`}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
        >
          <input
            type="file"
            accept="image/*"
            onChange={handleFileSelect}
            disabled={disabled || uploading}
            className="file-input"
            id="image-upload"
          />
          <label htmlFor="image-upload" className="upload-label">
            <div className="upload-content">
              {uploading ? (
                <>
                  <div className="loading-spinner"></div>
                  <p>ƒêang upload ·∫£nh l√™n Cloudinary...</p>
                  <p className="text-sm opacity-75">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
                </>
              ) : (
                <>
                  <Upload className="upload-icon" />
                  <p className="upload-text">
                    <span className="upload-text-primary">K√≠ch v√†o ƒë·ªÉ ch·ªçn ·∫£nh</span>
                    <br />
                    <span className="upload-text-secondary">ho·∫∑c k√©o th·∫£ ·∫£nh v√†o ƒë√¢y</span>
                  </p>
                  <p className="upload-info">
                    H·ªó tr·ª£: JPG, PNG, GIF (t·ªëi ƒëa 10MB)
                  </p>
                </>
              )}
            </div>
          </label>
        </div>
      )}

      {/* Hi·ªÉn th·ªã l·ªói v·ªõi kh·∫£ nƒÉng ƒë√≥ng */}
      {error && (
        <div className="upload-error">
          <AlertCircle className="w-4 h-4 mr-2" />
          <span>{error}</span>
          <button 
            type="button" 
            onClick={() => setError(null)}
            className="ml-2 text-sm underline hover:no-underline"
            title="ƒê√≥ng th√¥ng b√°o l·ªói"
          >
            ƒê√≥ng
          </button>
        </div>
      )}
    </div>
  );
};

export default CloudinaryImageUpload;
