import React, { useState, useContext } from "react";
import { ArrowLeft, Car, Battery, MapPin, DollarSign, FileText, CheckCircle, AlertCircle, ChevronRight, ChevronLeft } from "lucide-react";
import { useNavigate } from "react-router-dom";
import api from "../../api/axios";
import CloudinaryImageUpload from "../../components/CloudinaryImageUpload";
import "../../components/CloudinaryImageUpload.css";
import "./CreateListing.css"; // Import CSS file ƒë·ªÉ trang ƒëi·ªÉm cho UI/UX
import { AuthContext } from "../../contexts/AuthContext"; // Import AuthContext ƒë·ªÉ l·∫•y user info

function CreateListing() {
    const navigate = useNavigate();
    const { user } = useContext(AuthContext) || {}; // L·∫•y user t·ª´ AuthContext
    const [currentStep, setCurrentStep] = useState(1);
    // State qu·∫£n l√Ω d·ªØ li·ªáu form v·ªõi c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    const [formData, setFormData] = useState({
        title: '', // Ti√™u ƒë·ªÅ listing
        description: '', // M√¥ t·∫£ chi ti·∫øt
        price: '', // Gi√° b√°n
        mainImage: '', // URL ·∫£nh ch√≠nh t·ª´ Cloudinary
        productType: 'VEHICLE', // Lo·∫°i s·∫£n ph·∫©m: 'VEHICLE' ho·∫∑c 'BATTERY'

        // Th√¥ng tin chi ti·∫øt xe ƒëi·ªán
        vehicle: {
            type: 'CAR', // Lo·∫°i xe: CAR, BIKE, MOTORBIKE
            name: '', // T√™n xe
            model: '', // Model xe
            brand: '', // H√£ng xe
            year: new Date().getFullYear(), // NƒÉm s·∫£n xu·∫•t
            mileage: 0, // S·ªë km ƒë√£ ƒëi
            batteryCapacity: 0, // Dung l∆∞·ª£ng pin (kWh)
            conditionStatus: 'GOOD' // T√¨nh tr·∫°ng xe
        },

        // Th√¥ng tin chi ti·∫øt pin
        battery: {
            brand: '', // H√£ng pin
            model: '', // Model pin
            capacity: 0, // Dung l∆∞·ª£ng pin (kWh)
            healthPercentage: 100, // ƒê·ªô kh·ªèe pin (%)
            compatibleVehicles: '', // Xe t∆∞∆°ng th√≠ch
            conditionStatus: 'GOOD' // T√¨nh tr·∫°ng pin
        },

        // Th√¥ng tin v·ªã tr√≠
        location: {
            province: '', // T·ªânh/Th√†nh ph·ªë
            district: '', // Qu·∫≠n/Huy·ªán
            details: '' // ƒê·ªãa ch·ªâ chi ti·∫øt
        }
    });

    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(false);

    // C·∫•u h√¨nh c√°c b∆∞·ªõc t·∫°o listing v·ªõi icon ƒë·ªông theo lo·∫°i s·∫£n ph·∫©m
    const steps = [
        {
            id: 1,
            title: "Th√¥ng tin c∆° b·∫£n",
            icon: FileText,
            description: "Nh·∫≠p ti√™u ƒë·ªÅ, gi√° v√† m√¥ t·∫£ s·∫£n ph·∫©m"
        },
        {
            id: 2,
            title: "Chi ti·∫øt s·∫£n ph·∫©m",
            icon: formData.productType === 'VEHICLE' ? Car : Battery,
            description: formData.productType === 'VEHICLE'
                ? "Th√¥ng tin chi ti·∫øt v·ªÅ xe ƒëi·ªán"
                : "Th√¥ng tin chi ti·∫øt v·ªÅ pin"
        },
        {
            id: 3,
            title: "V·ªã tr√≠ & Ho√†n t·∫•t",
            icon: MapPin,
            description: "Th√¥ng tin v·ªã tr√≠ v√† x√°c nh·∫≠n ƒëƒÉng b√°n"
        }
    ];

    /**
     * X·ª≠ l√Ω thay ƒë·ªïi gi√° tr·ªã input trong form
     * @param {Event} e - Event t·ª´ input
     */
    const handleInputChange = (e) => {
        const { name, value } = e.target;

        // X·ª≠ l√Ω cho c√°c field nested (vd: vehicle.name, battery.brand)
        if (name.includes('.')) {
            const [section, field] = name.split('.');
            setFormData(prev => ({
                ...prev,
                [section]: {
                    ...prev[section],
                    // Convert s·ªë cho c√°c field s·ªë
                    [field]: field === 'year' || field === 'mileage' || field === 'batteryCapacity'
                    || field === 'capacity' || field === 'healthPercentage'
                        ? parseInt(value) || 0
                        : value
                }
            }));
        } else {
            // X·ª≠ l√Ω cho c√°c field c·∫•p cao
            setFormData(prev => ({
                ...prev,
                [name]: name === 'price' ? parseFloat(value) || 0 : value
            }));
        }
    };

    /**
     * X·ª≠ l√Ω khi upload ·∫£nh th√†nh c√¥ng t·ª´ Cloudinary
     * @param {string} imageUrl - URL ·∫£nh t·ª´ Cloudinary
     */
    const handleImageUpload = (imageUrl) => {
        setFormData(prev => ({
            ...prev,
            mainImage: imageUrl
        }));
    };

    /**
     * Submit form t·∫°o listing - Kh√¥ng c·∫ßn admin duy·ªát, ƒëƒÉng tr·ª±c ti·∫øp
     */
    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            setLoading(true);
            setError(null);

            // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu ƒëƒÉng b√†i
            if (!formData.title.trim()) {
                throw new Error('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i ƒëƒÉng');
            }

            if (!formData.price || formData.price <= 0) {
                throw new Error('Vui l√≤ng nh·∫≠p gi√° b√°n h·ª£p l·ªá');
            }

            if (!formData.location.province.trim()) {
                throw new Error('Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë');
            }

            // Ki·ªÉm tra authentication - c·∫ßn c√≥ user ƒë·ªÉ l√†m seller
            const userFromContext = user;
            const userFromLocalStorage = JSON.parse(localStorage.getItem('user') || 'null');
            const userFromSessionStorage = JSON.parse(sessionStorage.getItem('user') || 'null');
            const userFromUserInfo = JSON.parse(localStorage.getItem('userInfo') || 'null');

            console.log('üîç AUTHENTICATION DEBUG:', {
                userFromContext: userFromContext,
                userFromLocalStorage: userFromLocalStorage,
                userFromSessionStorage: userFromSessionStorage,
                userFromUserInfo: userFromUserInfo,
                localStorage_keys: Object.keys(localStorage),
                sessionStorage_keys: Object.keys(sessionStorage)
            });

            let currentUser = userFromContext || userFromUserInfo || userFromLocalStorage || userFromSessionStorage;

            // FALLBACK: N·∫øu kh√¥ng t√¨m th·∫•y user, th·ª≠ t·∫°o t·ª´ c√°c th√¥ng tin c√≥ s·∫µn
            if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {
                console.warn('‚ö†Ô∏è User data not found but isLoggedIn=true, creating fallback user');
                currentUser = {
                    id: 1, // Fallback user ID - thay ƒë·ªïi theo user th·ª±c t·∫ø
                    username: 'test_user',
                    email: 'Saitohtedofu1982@gamil.com'
                };
            }

            console.log('üë§ Final currentUser:', currentUser);

            if (!currentUser || !currentUser.id) {
                console.error('‚ùå Authentication failed - currentUser:', currentUser);
                console.error('‚ùå Please login again or check user data storage');
                throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ t·∫°o listing');
            }

            // Validate d·ªØ li·ªáu theo lo·∫°i s·∫£n ph·∫©m v·ªõi DB constraints
            if (formData.productType === 'VEHICLE') {
                if (!formData.vehicle.name.trim() || !formData.vehicle.brand.trim()) {
                    throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin xe ƒëi·ªán');
                }
                if (!formData.vehicle.type || !['CAR', 'BIKE', 'MOTORBIKE'].includes(formData.vehicle.type)) {
                    throw new Error('Lo·∫°i xe kh√¥ng h·ª£p l·ªá');
                }
                if (formData.vehicle.year < 2000 || formData.vehicle.year > new Date().getFullYear() + 1) {
                    throw new Error('NƒÉm s·∫£n xu·∫•t kh√¥ng h·ª£p l·ªá');
                }
            } else {
                if (!formData.battery.brand.trim() || formData.battery.capacity <= 0) {
                    throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin pin');
                }
                if (formData.battery.healthPercentage < 0 || formData.battery.healthPercentage > 100) {
                    throw new Error('ƒê·ªô kh·ªèe pin ph·∫£i t·ª´ 0-100%');
                }
            }

            // T·∫°o payload theo ƒê√öNG Backend DTO CreateListingFormDTO
            const payload = {
                // Listing basic information
                title: formData.title.trim(),
                description: formData.description?.trim() || null,
                price: Number(formData.price),
                listingType: 'NORMAL', // Backend s·∫Ω map th√†nh database enum: NORMAL, PREMIUM, FEATURED
                category: formData.productType, // 'VEHICLE' or 'BATTERY' ƒë·ªÉ backend bi·∫øt lo·∫°i s·∫£n ph·∫©m

                // Cloudinary image URLs (ƒë√£ ƒë∆∞·ª£c upload t·ª´ frontend)
                mainImageUrl: formData.mainImage || null,
                imageUrls: formData.mainImage ? [formData.mainImage] : [],

                // Product object theo Backend DTO structure
                product: formData.productType === 'VEHICLE' ? {
                    // N·∫øu l√† EV Vehicle - ch·ªâ c√≥ ev, battery = null
                    ev: {
                        type: formData.vehicle.type, // CAR, BIKE, MOTORBIKE
                        name: formData.vehicle.name.trim(),
                        model: formData.vehicle.model?.trim() || null,
                        brand: formData.vehicle.brand.trim(),
                        year: Number(formData.vehicle.year),
                        mileage: Number(formData.vehicle.mileage) || 0,
                        batteryCapacity: Number(formData.vehicle.batteryCapacity) || 0.0,
                        conditionStatus: formData.vehicle.conditionStatus // EXCELLENT, GOOD, FAIR, POOR, NEEDS_MAINTENANCE
                    },
                    battery: null
                } : {
                    // N·∫øu l√† Battery - ch·ªâ c√≥ battery, ev = null
                    ev: null,
                    battery: {
                        brand: formData.battery.brand.trim(),
                        model: formData.battery.model?.trim() || null,
                        capacity: Number(formData.battery.capacity),
                        healthPercentage: Number(formData.battery.healthPercentage),
                        compatibleVehicles: formData.battery.compatibleVehicles?.trim() || null,
                        conditionStatus: formData.battery.conditionStatus // EXCELLENT, GOOD, FAIR, POOR, NEEDS_REPLACEMENT
                    }
                },

                // Location object theo Backend DTO structure
                location: {
                    province: formData.location.province.trim(),
                    district: formData.location.district?.trim() || null,
                    details: formData.location.details?.trim() || null
                }
            };

            // Debug payload tr∆∞·ªõc khi g·ª≠i v·ªõi Backend DTO mapping
            console.log('DEBUG - D·ªØ li·ªáu form chu·∫©n b·ªã ƒëƒÉng b√†i:', formData);
            console.log('Th√¥ng tin x√°c th·ª±c ng∆∞·ªùi d√πng:', {
                user_from_context: user,
                user_from_storage: JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || 'null'),
                currentUser: currentUser,
                hasValidAuth: !!(currentUser && currentUser.id)
            });

            console.log('Payload s·∫Ω g·ª≠i cho backend (t·∫°o b√†i ch·ªù duy·ªát):', payload);

            console.log('‚úÖ Backend DTO compliance check:', {
                has_required_listing_fields: !!(payload.title && payload.price && payload.listingType),
                has_product_object: !!payload.product,
                has_location_object: !!payload.location,
                product_type: payload.category,
                has_ev_or_battery: !!(payload.product?.ev || payload.product?.battery),
                ev_vehicle_details: payload.product?.ev,
                battery_details: payload.product?.battery,
                location_details: payload.location,
                mainImageUrl: payload.mainImageUrl,
                imageUrls_count: payload.imageUrls?.length || 0
            });

            console.log('G·ª≠i y√™u c·∫ßu ƒëƒÉng b√†i ƒë·∫øn backend (c·∫ßn admin x√©t duy·ªát)...');

            // QUAN TR·ªåNG: ·∫¢nh ƒë√£ ƒë∆∞·ª£c upload l√™n Cloudinary r·ªìi (qua CloudinaryImageUpload component)
            // Ch·ªâ c·∫ßn g·ª≠i Cloudinary URL trong JSON payload, KH√îNG c·∫ßn upload l·∫°i

            // Ki·ªÉm tra ·∫£nh ƒë√£ ƒë∆∞·ª£c upload l√™n Cloudinary ch∆∞a
            if (!formData.mainImage || !formData.mainImage.startsWith('http')) {
                throw new Error('Vui l√≤ng upload ·∫£nh tr∆∞·ªõc khi ƒëƒÉng b√†i');
            }

            console.log('‚úÖ ·∫¢nh ƒë√£ c√≥ s·∫µn t·ª´ Cloudinary:', formData.mainImage);

            console.log('Final payload v·ªõi Cloudinary URLs:', payload);

            // G·ª≠i JSON request (kh√¥ng ph·∫£i multipart) v√¨ ·∫£nh ƒë√£ c√≥ s·∫µn tr√™n Cloudinary
            const response = await api.post('/listings/create', payload);

            console.log('Response t·ª´ backend:', {
                status: response.status,
                statusText: response.statusText,
                headers: response.headers,
                data: response.data
            });

            if (response.status === 200 || response.status === 201) {
                console.log('‚úÖ ƒêƒÉng b√†i th√†nh c√¥ng! B√†i ƒëƒÉng ƒëang ch·ªù admin x√©t duy·ªát.');
                setSuccess(true);

                // Hi·ªÉn th·ªã th√¥ng b√°o v√† chuy·ªÉn v·ªÅ home screen sau 3 gi√¢y
                setTimeout(() => {
                    // Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu ƒë·ªÉ chu·∫©n b·ªã cho l·∫ßn ƒëƒÉng b√†i ti·∫øp theo
                    setFormData({
                        title: '',
                        description: '',
                        price: '',
                        mainImage: '',
                        productType: 'VEHICLE',
                        vehicle: {
                            type: 'CAR',
                            name: '',
                            model: '',
                            brand: '',
                            year: new Date().getFullYear(),
                            mileage: 0,
                            batteryCapacity: 0,
                            conditionStatus: 'GOOD'
                        },
                        battery: {
                            brand: '',
                            model: '',
                            capacity: 0,
                            healthPercentage: 100,
                            compatibleVehicles: '',
                            conditionStatus: 'GOOD'
                        },
                        location: {
                            province: '',
                            district: '',
                            details: ''
                        }
                    });

                    setSuccess(false);
                    setCurrentStep(1);

                    // Chuy·ªÉn v·ªÅ trang ch·ªß thay v√¨ trang listing c·ª• th·ªÉ
                    // V√¨ b√†i ƒëƒÉng c·∫ßn ƒë∆∞·ª£c admin duy·ªát tr∆∞·ªõc khi hi·ªán ra trong listing
                    console.log('Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß...');
                    navigate('/');
                }, 3000); // TƒÉng th·ªùi gian l√™n 3 gi√¢y ƒë·ªÉ user ƒë·ªçc ƒë∆∞·ª£c th√¥ng b√°o
            }

        } catch (err) {
            // Enhanced error logging cho backend errors
            console.error('‚ùå L·ªói khi t·∫°o listing:', {
                error_message: err.message,
                error_name: err.name,
                response_status: err.response?.status,
                response_data: err.response?.data,
                response_headers: err.response?.headers,
                request_config: err.config,
                full_error: err
            });

            // Ph√¢n t√≠ch lo·∫°i l·ªói c·ª• th·ªÉ
            let userErrorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng b√†i';

            if (err.response) {
                const { status, data } = err.response;

                console.error('Ph√¢n t√≠ch l·ªói t·ª´ backend:', {
                    status: status,
                    data: data,
                    is_validation_error: status === 400,
                    is_unauthorized: status === 401,
                    is_server_error: status >= 500,
                    is_method_not_allowed: status === 405
                });

                if (status === 400) {
                    userErrorMessage = '‚ùå Th√¥ng tin kh√¥ng h·ª£p l·ªá: ' + (data || 'Vui l√≤ng ki·ªÉm tra l·∫°i c√°c th√¥ng tin ƒë√£ nh·∫≠p');
                } else if (status === 401) {
                    userErrorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ƒëƒÉng b√†i';
                } else if (status === 405) {
                    userErrorMessage = 'üö´ Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t';
                } else if (status === 403) {
                    userErrorMessage = 'üö´ Kh√¥ng c√≥ quy·ªÅn ƒëƒÉng b√†i: T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√©p ƒëƒÉng b√†i';
                } else if (status === 500) {
                    if (data?.includes && data.includes('rollback')) {
                        userErrorMessage = 'L·ªói c∆° s·ªü d·ªØ li·ªáu: Vui l√≤ng th·ª≠ ƒëƒÉng b√†i l·∫°i sau √≠t ph√∫t';
                    } else {
                        userErrorMessage = '‚ö†Ô∏è L·ªói h·ªá th·ªëng: Server ƒëang b·∫£o tr√¨, vui l√≤ng th·ª≠ l·∫°i sau';
                    }
                } else {
                    userErrorMessage = `L·ªói HTTP ${status}: ${data || 'Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t'}`;
                }
            } else if (err.request) {
                userErrorMessage = 'üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng';
            }

            console.error('üë§ User Error Message:', userErrorMessage);
            setError(userErrorMessage);
        } finally {
            setLoading(false);
        }
    };

    /**
     * ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn b∆∞·ªõc ti·∫øp theo
     * Ch·ªâ cho ph√©p next n·∫øu ch∆∞a ƒë·∫øn b∆∞·ªõc cu·ªëi
     */
    const nextStep = () => {
        if (currentStep < steps.length && validateStep(currentStep)) {
            setCurrentStep(currentStep + 1);
        }
    };

    /**
     * Quay l·∫°i b∆∞·ªõc tr∆∞·ªõc ƒë√≥
     * Ch·ªâ cho ph√©p back n·∫øu kh√¥ng ph·∫£i b∆∞·ªõc ƒë·∫ßu
     */
    const prevStep = () => {
        if (currentStep > 1) {
            setCurrentStep(currentStep - 1);
        }
    };

    /**
     * Chuy·ªÉn tr·ª±c ti·∫øp ƒë·∫øn b∆∞·ªõc c·ª• th·ªÉ
     * @param {number} step - S·ªë th·ª© t·ª± b∆∞·ªõc c·∫ßn chuy·ªÉn ƒë·∫øn
     */
    const goToStep = (step) => {
        if (step >= 1 && step <= steps.length) {
            setCurrentStep(step);
        }
    };

    /**
     * Validate d·ªØ li·ªáu theo t·ª´ng b∆∞·ªõc ƒë·ªÉ ki·ªÉm so√°t navigation
     * @param {number} step - B∆∞·ªõc c·∫ßn validate
     * @returns {boolean} - True n·∫øu d·ªØ li·ªáu h·ª£p l·ªá
     */
    const validateStep = (step) => {
        switch (step) {
            case 1:
                // B∆∞·ªõc 1: Ki·ªÉm tra th√¥ng tin c∆° b·∫£n
                return formData.title.trim().length > 0 && formData.price > 0;

            case 2:
                // B∆∞·ªõc 2: Ki·ªÉm tra th√¥ng tin s·∫£n ph·∫©m theo lo·∫°i v·ªõi validation chi ti·∫øt
                if (formData.productType === 'VEHICLE') {
                    return formData.vehicle.name.trim().length > 0 &&
                        formData.vehicle.brand.trim().length > 0 &&
                        formData.vehicle.year >= 2000 && // Xe ph·∫£i t·ª´ nƒÉm 2000 tr·ªü l√™n
                        formData.vehicle.year <= new Date().getFullYear() + 1; // Kh√¥ng qu√° nƒÉm hi·ªán t·∫°i + 1
                } else {
                    return formData.battery.brand.trim().length > 0 &&
                        formData.battery.capacity > 0 &&
                        formData.battery.healthPercentage > 0 &&
                        formData.battery.healthPercentage <= 100; // ƒê·ªô kh·ªèe pin t·ª´ 1-100%
                }

            case 3:
                // B∆∞·ªõc 3: Ki·ªÉm tra th√¥ng tin v·ªã tr√≠ (ch·ªâ c·∫ßn t·ªânh/th√†nh ph·ªë)
                return formData.location.province.trim().length > 0;

            default:
                return true;
        }
    };

    // Ki·ªÉm tra xem c√≥ th·ªÉ ti·∫øp t·ª•c b∆∞·ªõc ti·∫øp theo kh√¥ng
    const canProceed = validateStep(currentStep);

    return (
        <div className="create-listing-container">
            <div className="create-listing-wrapper">
                {/* Header v·ªõi n√∫t quay l·∫°i v√† ti√™u ƒë·ªÅ ch√≠nh */}
                <div className="create-listing-header">
                    <button
                        onClick={() => navigate(-1)}
                        className="back-button"
                    >
                        <ArrowLeft className="w-5 h-5 mr-2" />
                        Quay l·∫°i Home
                    </button>
                    <h1 className="main-title">
                        T·∫°o Listing M·ªõi
                    </h1>
                    <p className="main-subtitle">Chia s·∫ª s·∫£n ph·∫©m c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng</p>
                </div>

                {/* Selector ch·ªçn lo·∫°i s·∫£n ph·∫©m - Hi·ªÉn th·ªã ·ªü step ƒë·∫ßu ti√™n */}
                {currentStep === 1 && (
                    <div className="product-type-selector">
                        {/* Card ch·ªçn xe ƒëi·ªán */}
                        <div
                            className={`product-type-card ${formData.productType === 'VEHICLE' ? 'selected' : ''}`}
                            onClick={() => setFormData(prev => ({ ...prev, productType: 'VEHICLE' }))}
                        >
                            <div className="product-type-icon">
                                <Car className="w-8 h-8" />
                            </div>
                            <h3 className="product-type-title">Xe ƒêi·ªán</h3>
                            <p className="product-type-description">
                                ƒêƒÉng b√°n √¥ t√¥ ƒëi·ªán, xe m√°y ƒëi·ªán, xe ƒë·∫°p ƒëi·ªán v√† c√°c lo·∫°i xe ƒëi·ªán kh√°c
                            </p>
                        </div>

                        {/* Card ch·ªçn pin */}
                        <div
                            className={`product-type-card ${formData.productType === 'BATTERY' ? 'selected' : ''}`}
                            onClick={() => setFormData(prev => ({ ...prev, productType: 'BATTERY' }))}
                        >
                            <div className="product-type-icon">
                                <Battery className="w-8 h-8" />
                            </div>
                            <h3 className="product-type-title">Pin Xe ƒêi·ªán</h3>
                            <p className="product-type-description">
                                ƒêƒÉng b√°n pin lithium, pin thay th·∫ø, pin c≈© v√† ph·ª• ki·ªán pin xe ƒëi·ªán
                            </p>
                        </div>
                    </div>
                )}

                {/* Progress Steps v·ªõi CSS classes */}
                <div className="progress-stepper">
                    {steps.map((step, index) => {
                        const Icon = step.icon;
                        const isActive = currentStep === step.id;
                        const isCompleted = currentStep > step.id;

                        return (
                            <div key={step.id} className="step-item">
                                <div
                                    onClick={() => goToStep(step.id)}
                                    className={`step-icon ${
                                        isCompleted ? 'completed' : isActive ? 'active' : 'inactive'
                                    }`}
                                >
                                    {isCompleted ? <CheckCircle className="w-6 h-6" /> : <Icon className="w-6 h-6" />}
                                </div>
                                <div className="step-info">
                                    <div className="step-number">B∆∞·ªõc {step.id}</div>
                                    <div className="step-title">{step.title}</div>
                                </div>
                                {index < steps.length - 1 && (
                                    <div className={`step-connector ${isCompleted ? 'completed' : 'inactive'}`} />
                                )}
                            </div>
                        );
                    })}
                </div>

                {/* Th√¥ng b√°o l·ªói */}
                {error && (
                    <div className="alert-error">
                        <div className="alert-error-header">
                            <AlertCircle className="w-5 h-5 mr-3" />
                            C√≥ l·ªói x·∫£y ra
                        </div>
                        <p className="alert-error-text">{error}</p>
                    </div>
                )}

                {/* Th√¥ng b√°o th√†nh c√¥ng */}
                {success && (
                    <div className="alert-success">
                        <div className="alert-success-header">
                            <CheckCircle className="w-5 h-5 mr-3" />
                            ƒêƒÉng b√†i th√†nh c√¥ng!
                        </div>
                        <p className="alert-success-text">
                            üéâ B√†i ƒëƒÉng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng v√† ƒëang ch·ªù admin x√©t duy·ªát.
                            üìß B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua email khi b√†i ƒëƒÉng ƒë∆∞·ª£c ph√™ duy·ªát.
                            <br />
                            üè† ƒêang chuy·ªÉn v·ªÅ trang ch·ªß trong 3 gi√¢y...
                        </p>
                    </div>
                )}

                {/* Multi-Step Form Container */}
                <div className="form-container">
                    <form onSubmit={handleSubmit}>
                        {/* Step 1: Th√¥ng tin c∆° b·∫£n */}
                        {currentStep === 1 && (
                            <div>
                                <div className="step-header">
                                    <h2 className="step-header-title">
                                        <FileText className="w-7 h-7 text-blue-500 mr-3" />
                                        Th√¥ng tin c∆° b·∫£n
                                    </h2>
                                    <p className="step-header-subtitle">Nh·∫≠p th√¥ng tin c∆° b·∫£n v·ªÅ listing c·ªßa b·∫°n</p>
                                </div>

                                <div className="step-content">
                                    <div className="form-row cols-2">
                                        <div className="form-group">
                                            <label className="form-label required">Ti√™u ƒë·ªÅ listing</label>
                                            <input
                                                type="text"
                                                name="title"
                                                value={formData.title}
                                                onChange={handleInputChange}
                                                className="form-input"
                                                placeholder="VD: VinFast VF8 2023 nh∆∞ m·ªõi"
                                                required
                                            />
                                        </div>

                                        <div className="form-group">
                                            <label className="form-label required">Gi√° b√°n (VND)</label>
                                            <div className="input-with-icon">
                                                <DollarSign className="input-icon w-5 h-5" />
                                                <input
                                                    type="number"
                                                    name="price"
                                                    value={formData.price}
                                                    onChange={handleInputChange}
                                                    className="form-input with-icon"
                                                    placeholder="500000000"
                                                    required
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    <div className="form-group">
                                        <label className="form-label">M√¥ t·∫£ chi ti·∫øt</label>
                                        <textarea
                                            name="description"
                                            value={formData.description}
                                            onChange={handleInputChange}
                                            rows={4}
                                            className="form-textarea"
                                            placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m, t√¨nh tr·∫°ng, l·ªãch s·ª≠ s·ª≠ d·ª•ng..."
                                        />
                                    </div>

                                    {/* Lo·∫°i b·ªè "Lo·∫°i listing" v√† "Lo·∫°i s·∫£n ph·∫©m" v√¨ ƒë√£ c√≥ selector ·ªü tr√™n */}

                                    <div className="form-group">
                                        <label className="form-label">·∫¢nh ch√≠nh s·∫£n ph·∫©m</label>
                                        <CloudinaryImageUpload
                                            onImageUpload={handleImageUpload}
                                            currentImage={formData.mainImage}
                                            disabled={loading}
                                            className="mt-2"
                                        />
                                        <p className="text-sm text-gray-500 mt-2">
                                            Upload ·∫£nh l√™n cloud ƒë·ªÉ hi·ªÉn th·ªã s·∫£n ph·∫©m c·ªßa b·∫°n m·ªôt c√°ch t·ªët nh·∫•t
                                        </p>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Step 2: Chi ti·∫øt s·∫£n ph·∫©m */}
                        {currentStep === 2 && (
                            <div>
                                <div className="step-header">
                                    <h2 className="step-header-title">
                                        {formData.productType === 'VEHICLE'
                                            ? <Car className="w-7 h-7 text-blue-500 mr-3" />
                                            : <Battery className="w-7 h-7 text-blue-500 mr-3" />
                                        }
                                        Chi ti·∫øt s·∫£n ph·∫©m
                                    </h2>
                                    <p className="step-header-subtitle">
                                        Nh·∫≠p th√¥ng tin chi ti·∫øt v·ªÅ {formData.productType === 'VEHICLE' ? 'xe ƒëi·ªán' : 'pin'}
                                    </p>
                                </div>

                                <div className="step-content">
                                    {/* Form ri√™ng bi·ªát cho xe ƒëi·ªán */}
                                    {formData.productType === 'VEHICLE' && (
                                        <div className="vehicle-form-section">
                                            <div className="vehicle-form-header">
                                                <Car className="w-6 h-6 text-blue-600" />
                                                <h3>Th√¥ng tin xe ƒëi·ªán</h3>
                                            </div>

                                            <div className="form-row cols-3">
                                                <div className="form-group">
                                                    <label className="form-label required">Lo·∫°i xe</label>
                                                    <select
                                                        name="vehicle.type"
                                                        value={formData.vehicle.type}
                                                        onChange={handleInputChange}
                                                        className="form-select"
                                                    >
                                                        <option value="CAR">√î t√¥ ƒëi·ªán</option>
                                                        <option value="BIKE">Xe ƒë·∫°p ƒëi·ªán</option>
                                                        <option value="MOTORBIKE">Xe m√°y ƒëi·ªán</option>
                                                    </select>
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label required">H√£ng xe</label>
                                                    <input
                                                        type="text"
                                                        name="vehicle.brand"
                                                        value={formData.vehicle.brand}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: VinFast"
                                                        required
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label required">T√™n xe</label>
                                                    <input
                                                        type="text"
                                                        name="vehicle.name"
                                                        value={formData.vehicle.name}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: VF8"
                                                        required
                                                    />
                                                </div>
                                            </div>

                                            <div className="form-row cols-3">
                                                <div className="form-group">
                                                    <label className="form-label">Model</label>
                                                    <input
                                                        type="text"
                                                        name="vehicle.model"
                                                        value={formData.vehicle.model}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: Plus"
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label required">NƒÉm s·∫£n xu·∫•t</label>
                                                    <input
                                                        type="number"
                                                        name="vehicle.year"
                                                        value={formData.vehicle.year}
                                                        onChange={handleInputChange}
                                                        min="2000"
                                                        max={new Date().getFullYear() + 1}
                                                        className="form-input"
                                                        required
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label">S·ªë km ƒë√£ ƒëi</label>
                                                    <input
                                                        type="number"
                                                        name="vehicle.mileage"
                                                        value={formData.vehicle.mileage}
                                                        onChange={handleInputChange}
                                                        min="0"
                                                        className="form-input"
                                                        placeholder="0"
                                                    />
                                                </div>
                                            </div>

                                            <div className="form-row cols-2">
                                                <div className="form-group">
                                                    <label className="form-label">Dung l∆∞·ª£ng pin (kWh)</label>
                                                    <input
                                                        type="number"
                                                        name="vehicle.batteryCapacity"
                                                        value={formData.vehicle.batteryCapacity}
                                                        onChange={handleInputChange}
                                                        min="0"
                                                        step="0.1"
                                                        className="form-input"
                                                        placeholder="75.3"
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label required">T√¨nh tr·∫°ng</label>
                                                    <select
                                                        name="vehicle.conditionStatus"
                                                        value={formData.vehicle.conditionStatus}
                                                        onChange={handleInputChange}
                                                        className="form-select"
                                                    >
                                                        <option value="EXCELLENT">‚≠ê Xu·∫•t s·∫Øc</option>
                                                        <option value="GOOD">üëç T·ªët</option>
                                                        <option value="FAIR">üëå Kh√°</option>
                                                        <option value="POOR">üëé K√©m</option>
                                                        <option value="NEEDS_MAINTENANCE">üîß C·∫ßn b·∫£o tr√¨</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {/* Form ri√™ng bi·ªát cho pin */}
                                    {formData.productType === 'BATTERY' && (
                                        <div className="battery-form-section">
                                            <div className="battery-form-header">
                                                <Battery className="w-6 h-6 text-amber-600" />
                                                <h3>Th√¥ng tin pin xe ƒëi·ªán</h3>
                                            </div>

                                            <div className="form-row cols-2">
                                                <div className="form-group">
                                                    <label className="form-label required">H√£ng pin</label>
                                                    <input
                                                        type="text"
                                                        name="battery.brand"
                                                        value={formData.battery.brand}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: CATL, LG Chem, BYD"
                                                        required
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label">Model pin</label>
                                                    <input
                                                        type="text"
                                                        name="battery.model"
                                                        value={formData.battery.model}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: NCM523, LFP"
                                                    />
                                                </div>
                                            </div>

                                            <div className="form-row cols-2">
                                                <div className="form-group">
                                                    <label className="form-label required">Dung l∆∞·ª£ng (kWh)</label>
                                                    <input
                                                        type="number"
                                                        name="battery.capacity"
                                                        value={formData.battery.capacity}
                                                        onChange={handleInputChange}
                                                        min="0"
                                                        step="0.1"
                                                        className="form-input"
                                                        placeholder="75.3"
                                                        required
                                                    />
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label required">ƒê·ªô kh·ªèe pin (%)</label>
                                                    <input
                                                        type="number"
                                                        name="battery.healthPercentage"
                                                        value={formData.battery.healthPercentage}
                                                        onChange={handleInputChange}
                                                        min="0"
                                                        max="100"
                                                        className="form-input"
                                                        required
                                                    />
                                                </div>
                                            </div>

                                            <div className="form-row cols-2">
                                                <div className="form-group">
                                                    <label className="form-label required">T√¨nh tr·∫°ng</label>
                                                    <select
                                                        name="battery.conditionStatus"
                                                        value={formData.battery.conditionStatus}
                                                        onChange={handleInputChange}
                                                        className="form-select"
                                                    >
                                                        <option value="EXCELLENT">‚≠ê Xu·∫•t s·∫Øc</option>
                                                        <option value="GOOD">üëç T·ªët</option>
                                                        <option value="FAIR">üëå Kh√°</option>
                                                        <option value="POOR">üëé K√©m</option>
                                                        <option value="NEEDS_REPLACEMENT">üîÑ C·∫ßn thay th·∫ø</option>
                                                    </select>
                                                </div>

                                                <div className="form-group">
                                                    <label className="form-label">Xe t∆∞∆°ng th√≠ch</label>
                                                    <input
                                                        type="text"
                                                        name="battery.compatibleVehicles"
                                                        value={formData.battery.compatibleVehicles}
                                                        onChange={handleInputChange}
                                                        className="form-input"
                                                        placeholder="VD: VinFast VF8, VF9"
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Step 3: V·ªã tr√≠ & Ho√†n t·∫•t */}
                        {currentStep === 3 && (
                            <div>
                                <div className="step-header">
                                    <h2 className="step-header-title">
                                        <MapPin className="w-7 h-7 text-blue-500 mr-3" />
                                        V·ªã tr√≠ & Ho√†n t·∫•t
                                    </h2>
                                    <p className="step-header-subtitle">Nh·∫≠p th√¥ng tin v·ªã tr√≠ v√† xem l·∫°i to√†n b·ªô listing</p>
                                </div>

                                <div className="step-content">
                                    {/* Th√¥ng tin v·ªã tr√≠ */}
                                    <div className="form-group mb-6">
                                        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                            <MapPin className="w-5 h-5 text-blue-500 mr-2" />
                                            Th√¥ng tin v·ªã tr√≠
                                        </h3>
                                        <div className="form-row cols-2">
                                            <div className="form-group">
                                                <label className="form-label required">T·ªânh/Th√†nh ph·ªë</label>
                                                <input
                                                    type="text"
                                                    name="location.province"
                                                    value={formData.location.province}
                                                    onChange={handleInputChange}
                                                    className="form-input"
                                                    placeholder="VD: H√† N·ªôi"
                                                    required
                                                />
                                            </div>

                                            <div className="form-group">
                                                <label className="form-label">Qu·∫≠n/Huy·ªán</label>
                                                <input
                                                    type="text"
                                                    name="location.district"
                                                    value={formData.location.district}
                                                    onChange={handleInputChange}
                                                    className="form-input"
                                                    placeholder="VD: Ba ƒê√¨nh"
                                                />
                                            </div>
                                        </div>

                                        <div className="form-group">
                                            <label className="form-label">ƒê·ªãa ch·ªâ chi ti·∫øt</label>
                                            <textarea
                                                name="location.details"
                                                value={formData.location.details}
                                                onChange={handleInputChange}
                                                rows={3}
                                                className="form-textarea"
                                                placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£..."
                                            />
                                        </div>
                                    </div>

                                    {/* Xem l·∫°i th√¥ng tin */}
                                    <div className="review-section">
                                        <div className="review-header">
                                            <CheckCircle className="w-6 h-6" />
                                            <h3>Xem l·∫°i th√¥ng tin listing</h3>
                                        </div>
                                        <div className="space-y-3">
                                            <div className="review-item">
                                                <span className="review-label">Ti√™u ƒë·ªÅ:</span>
                                                <span className="review-value">{formData.title || 'Ch∆∞a nh·∫≠p'}</span>
                                            </div>
                                            <div className="review-item">
                                                <span className="review-label">Gi√°:</span>
                                                <span className="review-value font-bold">
                          {formData.price ? `${formData.price.toLocaleString()} VND` : 'Ch∆∞a nh·∫≠p'}
                        </span>
                                            </div>
                                            <div className="review-item">
                                                <span className="review-label">Lo·∫°i s·∫£n ph·∫©m:</span>
                                                <span className="review-value">{formData.productType === 'VEHICLE' ? 'Xe ƒëi·ªán' : 'Pin'}</span>
                                            </div>
                                            {formData.productType === 'VEHICLE' && (
                                                <div className="review-item">
                                                    <span className="review-label">Xe:</span>
                                                    <span className="review-value">
                            {formData.vehicle.brand} {formData.vehicle.name} ({formData.vehicle.year})
                          </span>
                                                </div>
                                            )}
                                            {formData.productType === 'BATTERY' && (
                                                <div className="review-item">
                                                    <span className="review-label">Pin:</span>
                                                    <span className="review-value">
                            {formData.battery.brand} - {formData.battery.capacity}kWh ({formData.battery.healthPercentage}%)
                          </span>
                                                </div>
                                            )}
                                            <div className="review-item">
                                                <span className="review-label">V·ªã tr√≠:</span>
                                                <span className="review-value">{formData.location.province || 'Ch∆∞a nh·∫≠p'}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Navigation Buttons */}
                        <div className="navigation-buttons">
                            <button
                                type="button"
                                onClick={prevStep}
                                disabled={currentStep === 1}
                                className={`nav-button nav-button-back ${currentStep === 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
                            >
                                <ChevronLeft className="w-5 h-5 mr-2" />
                                Quay l·∫°i
                            </button>

                            <div className="flex space-x-4">
                                {currentStep < steps.length ? (
                                    <button
                                        type="button"
                                        onClick={nextStep}
                                        disabled={!canProceed}
                                        className={`nav-button nav-button-next ${!canProceed ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    >
                                        Ti·∫øp t·ª•c
                                        <ChevronRight className="w-5 h-5 ml-2" />
                                    </button>
                                ) : (
                                    <button
                                        type="submit"
                                        disabled={loading || !canProceed}
                                        className={`nav-button nav-button-submit ${loading || !canProceed ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    >
                                        {loading ? (
                                            <>
                                                <div className="loading-spinner"></div>
                                                ƒêang t·∫°o...
                                            </>
                                        ) : (
                                            <>
                                                <CheckCircle className="w-5 h-5 mr-2" />
                                                T·∫°o Listing
                                            </>
                                        )}
                                    </button>
                                )}
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

export default CreateListing;